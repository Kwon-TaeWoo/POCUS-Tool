# %%
"""
Code Name  : UI_transunet_inference_240220.py
Author     : Subin Park (subinn.park@gmail.com)
Created on : 24. 2. 20. 오후 1:36
Desc       : 
"""

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UI_code_2.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# %%
import random
import numpy as np
import configparser
import cv2
import os
import time
import pyqtgraph


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import *
from PyQt5.QtCore import QTimer, Qt
from PyQt5.QtWidgets import *

from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
from matplotlib.figure import Figure
from matplotlib import pyplot as plt

from preprocessing import *
from model_init import *
from utils import *
from calculate_CAC import process_images_realtime
import time
from collections import deque

# %%
buttonStyleSheet = '''
            QPushButton{
                border: 2px solid;
                border-color: rgb(112, 112, 112);
                background-color: rgb(56, 56, 56);
                }
            QPushButton:hover {
                border: 4px solid;
                border-color: blue;
                color: yellow;
                }
            QPushButton:disabled {
                color: gray;
                background-color: rgb(112, 112, 112);
                border-style: outset;                
                        }
            '''

# %%
class Ui_MainWindow(object):
    def __init__(self):
        super().__init__()
        self.translate = QtCore.QCoreApplication.translate
        
        self.state = State.Ready
        self.base_folder = os.getcwd()
        #self.save_folder = './' # 0228 수정 
        self.save_folder = os.path.join(self.base_folder, 'model_output')
        self.temp_folder = os.path.join(self.base_folder, 'temp')
        self.temp_folder_origin = os.path.join(self.base_folder, 'temp_original')
        self.file_name = 'NONE'
        folder_make_func(self.temp_folder)
        folder_make_func(self.temp_folder_origin)
        
        
        self.config_filepath = 'config.ini'
        #self.images = sorted(filter(lambda x: x.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp', '.gif')), os.listdir(folder_path)))
        
        self.fps = 30
        self.current_image_index = 0
        self.cap_video = 0
        self.ROI_x1 = 450
        self.ROI_y1 = 40
        self.ROI_x2 = 1500 
        self.ROI_y2 = 950
        self.ROI_x1_ = 70
        self.ROI_y1_ = 15
        self.ROI_x2_ = 560 
        self.ROI_y2_ = 475
        self.target_size_256 = (256, 256, 3)
        self.target_size_512 = (512, 512, 3)
        
        self.images = []
        self.measurements = []
        self.cac_measurements = []
        self.IJV_measurements = []
        
        self.ABP_measurements = []
        
        self.cac_buffer = deque(maxlen=10)
        self.ijv_buffer = deque(maxlen=10)
        self.abp_buffer = deque(maxlen=10)
        
        self.isCalc = False     # inference 실행 여부
        self.isDisplay = False  # 선언되지 않음
        self.isPlay = False
        self.isHDMI = False
        self.isVideo = False
        self.isBlack = False
        
        self.ProgramName = 'POCUS-CAC GUI'
        self.Version = '1.00'
        # 0228 수정 시작 - Model Path 추가
        self.LargeModelName = './checkpoint/checkpoint230605__output_noising_CLAHE_transunet_withaug_various_iter1.pth'
        self.SmallModelName = './checkpoint/checkpoint240305__output_noising_CLAHE_transunet_256_cutout_iter1.pth'
        # 0228 수정 완료
        
        self.AutoCalculate = True
        self.AutoROI = True
        self.AutoSave = True
        self.AutoFolder = True
        # 0228 수정 시작 - 경량화 모델 및 Ellipse 추가
        self.SmallModel = True
        self.DrawEllipse = True
        # 0228 수정 완료
        
        self.ROI = '450|40|1500|950'
        self.DeviceID = 0
        
        self.model = None
        self.test_transforms = None
        self.cap = None

        self.ischeckTimer = False
        self.isautoTimer = False
        
        self.config = self.loadConfig()
        self.setupUi(MainWindow)
        
        self.doInitialize()
        self.check_state_Ui()
        
        
        
    def setupUi(self, MainWindow):
        #TODO self.visualization
        self.visualization = "pyqtgraph"
        #self.visualization = "matplotlib"
        
        
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1920, 1080)
        MainWindow.setMinimumSize(QtCore.QSize(1920, 1080))
        MainWindow.setStyleSheet("color: rgb(255, 255, 255);\n"
                                 "font: 75 18pt \"나눔스퀘어 Bold\";\n"
                                 "background-color: rgb(0, 0, 0);\n"
                                 "")
        self.widgetMain = QtWidgets.QWidget(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widgetMain.sizePolicy().hasHeightForWidth())
        self.widgetMain.setSizePolicy(sizePolicy)
        self.widgetMain.setStyleSheet("")
        self.widgetMain.setObjectName("widgetMain")
        self.gridMainWidget = QtWidgets.QGridLayout(self.widgetMain)
        self.gridMainWidget.setContentsMargins(0, 0, 0, 0)
        self.gridMainWidget.setSpacing(0)
        self.gridMainWidget.setObjectName("gridMainWidget")
        self.gridMain = QtWidgets.QHBoxLayout()
        self.gridMain.setSpacing(0)
        self.gridMain.setObjectName("gridMain")
        self.frameCommand = QtWidgets.QFrame(self.widgetMain)
        self.frameCommand.setMinimumSize(QtCore.QSize(400, 0))
        self.frameCommand.setMaximumSize(QtCore.QSize(400, 16777215))
        self.frameCommand.setStyleSheet("background-color: rgb(48, 48, 48);")
        self.frameCommand.setObjectName("frameCommand")
        self.gridCommand = QtWidgets.QVBoxLayout(self.frameCommand)
        self.gridCommand.setContentsMargins(0, 20, 0, 20)
        self.gridCommand.setSpacing(15)
        self.gridCommand.setObjectName("gridCommand")
        self.labelHeader = QtWidgets.QLabel(self.frameCommand)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.labelHeader.sizePolicy().hasHeightForWidth())
        self.labelHeader.setSizePolicy(sizePolicy)
        self.labelHeader.setMinimumSize(QtCore.QSize(400, 40))
        self.labelHeader.setMaximumSize(QtCore.QSize(400, 40))
        font = QtGui.QFont()
        font.setFamily("나눔스퀘어 Bold")
        font.setPointSize(18)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.labelHeader.setFont(font)
        self.labelHeader.setAlignment(QtCore.Qt.AlignCenter)
        self.labelHeader.setObjectName("labelHeader")
        self.gridCommand.addWidget(self.labelHeader)
        self.frameCheckBoxVertical = QtWidgets.QFrame(self.frameCommand)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frameCheckBoxVertical.sizePolicy().hasHeightForWidth())
        self.frameCheckBoxVertical.setSizePolicy(sizePolicy)
        self.frameCheckBoxVertical.setMaximumSize(QtCore.QSize(400, 100))
        self.frameCheckBoxVertical.setStyleSheet("font: 75 9pt \"나눔스퀘어 Bold\";\n"
                                                 "background-color: rgb(48, 48, 48);")
        self.frameCheckBoxVertical.setObjectName("frameCheckBoxVertical")
        self.gridCheckBoxVertical = QtWidgets.QVBoxLayout(self.frameCheckBoxVertical)
        self.gridCheckBoxVertical.setContentsMargins(0, 0, 0, 0)
        self.gridCheckBoxVertical.setSpacing(0)
        self.gridCheckBoxVertical.setObjectName("gridCheckBoxVertical")
        self.frameCheckBoxHorizontalUp = QtWidgets.QFrame(self.frameCheckBoxVertical)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frameCheckBoxHorizontalUp.sizePolicy().hasHeightForWidth())
        self.frameCheckBoxHorizontalUp.setSizePolicy(sizePolicy)
        self.frameCheckBoxHorizontalUp.setMinimumSize(QtCore.QSize(400, 40))
        self.frameCheckBoxHorizontalUp.setMaximumSize(QtCore.QSize(400, 40))
        self.frameCheckBoxHorizontalUp.setStyleSheet("")
        self.frameCheckBoxHorizontalUp.setLineWidth(0)
        self.frameCheckBoxHorizontalUp.setObjectName("frameCheckBoxHorizontalUp")
        self.gridCheckBoxHorizontalUp = QtWidgets.QHBoxLayout(self.frameCheckBoxHorizontalUp)
        self.gridCheckBoxHorizontalUp.setContentsMargins(5, 0, 0, 0)
        self.gridCheckBoxHorizontalUp.setSpacing(0)
        self.gridCheckBoxHorizontalUp.setObjectName("gridCheckBoxHorizontalUp")
        self.cbAutoCalc = QtWidgets.QCheckBox(self.frameCheckBoxHorizontalUp)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(150)
        sizePolicy.setVerticalStretch(40)
        sizePolicy.setHeightForWidth(self.cbAutoCalc.sizePolicy().hasHeightForWidth())
        self.cbAutoCalc.setSizePolicy(sizePolicy)
        self.cbAutoCalc.setMaximumSize(QtCore.QSize(150, 40))
        self.cbAutoCalc.setStyleSheet("")
        self.cbAutoCalc.setChecked(self.AutoCalculate)
        self.cbAutoCalc.setObjectName("cbAutoCalc")
        self.gridCheckBoxHorizontalUp.addWidget(self.cbAutoCalc)
        self.cbAutoROI = QtWidgets.QCheckBox(self.frameCheckBoxHorizontalUp)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(150)
        sizePolicy.setVerticalStretch(40)
        sizePolicy.setHeightForWidth(self.cbAutoROI.sizePolicy().hasHeightForWidth())
        self.cbAutoROI.setSizePolicy(sizePolicy)
        self.cbAutoROI.setMaximumSize(QtCore.QSize(150, 40))
        self.cbAutoROI.setStyleSheet("")
        self.cbAutoROI.setChecked(self.AutoROI)
        self.cbAutoROI.setObjectName("cbAutoROI")
        self.gridCheckBoxHorizontalUp.addWidget(self.cbAutoROI)
        self.gridCheckBoxVertical.addWidget(self.frameCheckBoxHorizontalUp)
        
        # 0228 수정 시작 - checkbox 추가
        self.frameCheckBoxHorizontalMid = QtWidgets.QFrame(self.frameCheckBoxVertical)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frameCheckBoxHorizontalMid.sizePolicy().hasHeightForWidth())
        self.frameCheckBoxHorizontalMid.setSizePolicy(sizePolicy)
        self.frameCheckBoxHorizontalMid.setMinimumSize(QtCore.QSize(400, 40))
        self.frameCheckBoxHorizontalMid.setMaximumSize(QtCore.QSize(400, 40))
        self.frameCheckBoxHorizontalMid.setStyleSheet("")
        self.frameCheckBoxHorizontalMid.setLineWidth(0)
        self.frameCheckBoxHorizontalMid.setObjectName("frameCheckBoxHorizontalMid")
        self.gridCheckBoxHorizontalMid = QtWidgets.QHBoxLayout(self.frameCheckBoxHorizontalMid)
        self.gridCheckBoxHorizontalMid.setContentsMargins(5, 0, 0, 0)
        self.gridCheckBoxHorizontalMid.setSpacing(0)
        self.gridCheckBoxHorizontalMid.setObjectName("gridCheckBoxHorizontalMid")
        self.cbAutoSave = QtWidgets.QCheckBox(self.frameCheckBoxHorizontalMid)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(150)
        sizePolicy.setVerticalStretch(40)
        sizePolicy.setHeightForWidth(self.cbAutoSave.sizePolicy().hasHeightForWidth())
        self.cbAutoSave.setSizePolicy(sizePolicy)
        self.cbAutoSave.setMaximumSize(QtCore.QSize(150, 40))
        self.cbAutoSave.setStyleSheet("")
        self.cbAutoSave.setChecked(self.AutoSave)
        self.cbAutoSave.setObjectName("cbAutoSave")
        self.gridCheckBoxHorizontalMid.addWidget(self.cbAutoSave)
        self.cbAutoFolder = QtWidgets.QCheckBox(self.frameCheckBoxHorizontalMid)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(150)
        sizePolicy.setVerticalStretch(40)
        sizePolicy.setHeightForWidth(self.cbAutoFolder.sizePolicy().hasHeightForWidth())
        self.cbAutoFolder.setSizePolicy(sizePolicy)
        self.cbAutoFolder.setMaximumSize(QtCore.QSize(150, 40))
        self.cbAutoFolder.setStyleSheet("")
        self.cbAutoFolder.setChecked(self.AutoFolder)
        self.cbAutoFolder.setObjectName("cbAutoFolder")
        self.gridCheckBoxHorizontalMid.addWidget(self.cbAutoFolder)
        self.gridCheckBoxVertical.addWidget(self.frameCheckBoxHorizontalMid, 0, QtCore.Qt.AlignTop)
        
        self.frameCheckBoxHorizontalDown = QtWidgets.QFrame(self.frameCheckBoxVertical)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frameCheckBoxHorizontalDown.sizePolicy().hasHeightForWidth())
        self.frameCheckBoxHorizontalDown.setSizePolicy(sizePolicy)
        self.frameCheckBoxHorizontalDown.setMinimumSize(QtCore.QSize(400, 40))
        self.frameCheckBoxHorizontalDown.setMaximumSize(QtCore.QSize(400, 40))
        self.frameCheckBoxHorizontalDown.setStyleSheet("")
        self.frameCheckBoxHorizontalDown.setLineWidth(0)
        self.frameCheckBoxHorizontalDown.setObjectName("frameCheckBoxHorizontalDown")
        self.gridCheckBoxHorizontalDown = QtWidgets.QHBoxLayout(self.frameCheckBoxHorizontalDown)
        self.gridCheckBoxHorizontalDown.setContentsMargins(5, 0, 0, 0)
        self.gridCheckBoxHorizontalDown.setSpacing(0)
        self.gridCheckBoxHorizontalDown.setObjectName("gridCheckBoxHorizontalDown")
        self.cbSmallModel = QtWidgets.QCheckBox(self.frameCheckBoxHorizontalDown)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(150)
        sizePolicy.setVerticalStretch(40)
        sizePolicy.setHeightForWidth(self.cbSmallModel.sizePolicy().hasHeightForWidth())
        self.cbSmallModel.setSizePolicy(sizePolicy)
        self.cbSmallModel.setMaximumSize(QtCore.QSize(150, 40))
        self.cbSmallModel.setStyleSheet("")
        self.cbSmallModel.setChecked(self.SmallModel)
        self.cbSmallModel.setObjectName("cbSmallModel")
        self.gridCheckBoxHorizontalDown.addWidget(self.cbSmallModel)
        self.cbDrawEllipse = QtWidgets.QCheckBox(self.frameCheckBoxHorizontalDown)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(150)
        sizePolicy.setVerticalStretch(40)
        sizePolicy.setHeightForWidth(self.cbDrawEllipse.sizePolicy().hasHeightForWidth())
        self.cbDrawEllipse.setSizePolicy(sizePolicy)
        self.cbDrawEllipse.setMaximumSize(QtCore.QSize(150, 40))
        self.cbDrawEllipse.setStyleSheet("")
        self.cbDrawEllipse.setChecked(self.DrawEllipse)
        self.cbDrawEllipse.setObjectName("cbDrawEllipse")
        self.gridCheckBoxHorizontalDown.addWidget(self.cbDrawEllipse)
        self.gridCheckBoxVertical.addWidget(self.frameCheckBoxHorizontalDown, 0, QtCore.Qt.AlignTop)
        # 0228 수정 완료
        
        self.gridCommand.addWidget(self.frameCheckBoxVertical, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.frameButton = QtWidgets.QFrame(self.frameCommand)
        self.frameButton.setMinimumSize(QtCore.QSize(400, 0))
        self.frameButton.setMaximumSize(QtCore.QSize(400, 16777215))
        self.frameButton.setObjectName("frameButton")
        self.gridButton = QtWidgets.QVBoxLayout(self.frameButton)
        self.gridButton.setContentsMargins(0, 0, 0, 0)
        self.gridButton.setSpacing(15)
        self.gridButton.setObjectName("gridButton")
        self.btnConnectHDMI = QtWidgets.QPushButton(self.frameButton)
        self.btnConnectHDMI.setMinimumSize(QtCore.QSize(350, 100))
        self.btnConnectHDMI.setMaximumSize(QtCore.QSize(350, 100))
        self.btnConnectHDMI.setStyleSheet(buttonStyleSheet)
        self.btnConnectHDMI.setObjectName("btnConnectHDMI")
        self.gridButton.addWidget(self.btnConnectHDMI, 0, QtCore.Qt.AlignHCenter)
        self.btnLoadVideo = QtWidgets.QPushButton(self.frameButton)
        self.btnLoadVideo.setMinimumSize(QtCore.QSize(350, 100))
        self.btnLoadVideo.setMaximumSize(QtCore.QSize(350, 100))
        self.btnLoadVideo.setStyleSheet(buttonStyleSheet)
        self.btnLoadVideo.setObjectName("btnLoadVideo")
        self.gridButton.addWidget(self.btnLoadVideo, 0, QtCore.Qt.AlignHCenter)
        self.btnCalculateCAC = QtWidgets.QPushButton(self.frameButton)
        self.btnCalculateCAC.setMinimumSize(QtCore.QSize(350, 100))
        self.btnCalculateCAC.setMaximumSize(QtCore.QSize(350, 100))
        self.btnCalculateCAC.setStyleSheet(buttonStyleSheet)
        self.btnCalculateCAC.setCheckable(False)
        self.btnCalculateCAC.setObjectName("btnCalculateCAC")
        self.gridButton.addWidget(self.btnCalculateCAC, 0, QtCore.Qt.AlignHCenter)
        self.btnSetROI = QtWidgets.QPushButton(self.frameButton)
        self.btnSetROI.setMinimumSize(QtCore.QSize(350, 100))
        self.btnSetROI.setMaximumSize(QtCore.QSize(350, 100))
        self.btnSetROI.setStyleSheet(buttonStyleSheet)
        self.btnSetROI.setObjectName("btnSetROI")
        self.gridButton.addWidget(self.btnSetROI, 0, QtCore.Qt.AlignHCenter)
        self.btnExportVideo = QtWidgets.QPushButton(self.frameButton)
        self.btnExportVideo.setMinimumSize(QtCore.QSize(350, 100))
        self.btnExportVideo.setMaximumSize(QtCore.QSize(350, 100))
        self.btnExportVideo.setStyleSheet(buttonStyleSheet)
        self.btnExportVideo.setObjectName("btnExportVideo")
        self.gridButton.addWidget(self.btnExportVideo, 0, QtCore.Qt.AlignHCenter)
        self.btnExportImage = QtWidgets.QPushButton(self.frameButton)
        self.btnExportImage.setMinimumSize(QtCore.QSize(350, 100))
        self.btnExportImage.setMaximumSize(QtCore.QSize(350, 100))
        self.btnExportImage.setStyleSheet(buttonStyleSheet)
        self.btnExportImage.setObjectName("btnExportImage")
        self.gridButton.addWidget(self.btnExportImage, 0, QtCore.Qt.AlignHCenter)
        self.btnExportExcel = QtWidgets.QPushButton(self.frameButton)
        self.btnExportExcel.setMinimumSize(QtCore.QSize(350, 100))
        self.btnExportExcel.setMaximumSize(QtCore.QSize(350, 100))
        self.btnExportExcel.setStyleSheet(buttonStyleSheet)
        self.btnExportExcel.setObjectName("btnExportExcel")
        self.gridButton.addWidget(self.btnExportExcel, 0, QtCore.Qt.AlignHCenter)
        self.gridCommand.addWidget(self.frameButton)
        self.labelFooter = QtWidgets.QLabel(self.frameCommand)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.labelFooter.sizePolicy().hasHeightForWidth())
        self.labelFooter.setSizePolicy(sizePolicy)
        self.labelFooter.setMinimumSize(QtCore.QSize(400, 0))
        self.labelFooter.setMaximumSize(QtCore.QSize(400, 16777215))
        self.labelFooter.setText("")
        self.labelFooter.setObjectName("labelFooter")
        self.gridCommand.addWidget(self.labelFooter)
        
        # 0228 수정 시작 ProgressBar 
        self.progressBar = QtWidgets.QProgressBar(self.frameCommand)
        self.progressBar.setProperty("value", 0)
        self.progressBar.setAlignment(QtCore.Qt.AlignCenter)
        self.progressBar.setTextVisible(True)
        self.progressBar.setObjectName("progressBar")
        self.gridCommand.addWidget(self.progressBar)
        # 0228 수정 완료
        
        self.gridMain.addWidget(self.frameCommand)
        self.frameData = QtWidgets.QFrame(self.widgetMain)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frameData.sizePolicy().hasHeightForWidth())
        self.frameData.setSizePolicy(sizePolicy)
        self.frameData.setObjectName("frameData")
        self.gridData = QtWidgets.QVBoxLayout(self.frameData)
        self.gridData.setContentsMargins(0, 0, 0, 0)
        self.gridData.setSpacing(0)
        self.gridData.setObjectName("gridData")
        self.labelImage = QtWidgets.QLabel(self.frameData)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.labelImage.sizePolicy().hasHeightForWidth())
        self.labelImage.setSizePolicy(sizePolicy)
        self.labelImage.setAlignment(QtCore.Qt.AlignCenter)
        self.labelImage.setObjectName("labelImage")
        self.gridData.addWidget(self.labelImage)
        self.gridMain.addWidget(self.frameData)
        self.frameMeasureGraph = QtWidgets.QFrame(self.widgetMain)
        self.frameMeasureGraph.setStyleSheet("font: 75 20pt \"나눔스퀘어 Bold\";")
        self.frameMeasureGraph.setObjectName("frameMeasureGraph")
        self.gridMeasureGraph = QtWidgets.QVBoxLayout(self.frameMeasureGraph)
        self.gridMeasureGraph.setContentsMargins(10, 20, 0, 20)
        self.gridMeasureGraph.setSpacing(0)
        self.gridMeasureGraph.setObjectName("gridMeasureGraph")
        self.frameMeasure = QtWidgets.QFrame(self.frameMeasureGraph)
        self.frameMeasure.setMinimumSize(QtCore.QSize(600, 100))
        self.frameMeasure.setMaximumSize(QtCore.QSize(600, 100))
        self.frameMeasure.setObjectName("frameMeasure")
        self.gridMeasure = QtWidgets.QVBoxLayout(self.frameMeasure)
        self.gridMeasure.setContentsMargins(0, 0, 0, 0)
        self.gridMeasure.setSpacing(0)
        self.gridMeasure.setObjectName("gridMeasure")
        self.frameMeasureValue = QtWidgets.QFrame(self.frameMeasure)
        self.frameMeasureValue.setMinimumSize(QtCore.QSize(600, 100))
        self.frameMeasureValue.setMaximumSize(QtCore.QSize(600, 100))
        self.frameMeasureValue.setObjectName("frameMeasureValue")
        

        self.gridMeasureValue = QtWidgets.QHBoxLayout(self.frameMeasureValue)
        self.gridMeasureValue.setSpacing(0)
        self.gridMeasureValue.setObjectName("gridMeasureValue")
        self.labelMeasureROSC = QtWidgets.QLabel(self.frameMeasureValue)
        self.labelMeasureROSC.setMinimumSize(QtCore.QSize(300, 100))
        self.labelMeasureROSC.setMaximumSize(QtCore.QSize(300, 100))
        self.labelMeasureROSC.setAlignment(QtCore.Qt.AlignCenter)
        self.labelMeasureROSC.setObjectName("labelMeasureROSC")
        self.gridMeasureValue.addWidget(self.labelMeasureROSC)
        self.labelMeasureCAC = QtWidgets.QLabel(self.frameMeasureValue)
        self.labelMeasureCAC.setMinimumSize(QtCore.QSize(300, 100))
        self.labelMeasureCAC.setMaximumSize(QtCore.QSize(300, 100))
        self.labelMeasureCAC.setAlignment(QtCore.Qt.AlignCenter)
        self.labelMeasureCAC.setObjectName("labelMeasureCAC")
        self.gridMeasureValue.addWidget(self.labelMeasureCAC)
        self.gridMeasure.addWidget(self.frameMeasureValue, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.gridMeasureGraph.addWidget(self.frameMeasure)
        self.frameGraph = QtWidgets.QFrame(self.frameMeasureGraph)
        self.frameGraph.setObjectName("frameGraph")
        self.gridGraph = QtWidgets.QVBoxLayout(self.frameGraph)
        self.gridGraph.setContentsMargins(0, 0, 0, 0)
        self.gridGraph.setSpacing(0)
        self.gridGraph.setObjectName("gridGraph")
        

        
        if self.visualization == "matplotlib":
            self.labelGraphCAC = QtWidgets.QLabel(self.frameGraph)
            self.labelGraphCAC.setMinimumSize(QtCore.QSize(600, 0))
            self.labelGraphCAC.setMaximumSize(QtCore.QSize(600, 16777215))
            self.labelGraphCAC.setAlignment(QtCore.Qt.AlignCenter)
            self.labelGraphCAC.setObjectName("labelGraphCAC")
            self.gridGraph.addWidget(self.labelGraphCAC)
            self.labelGraphBPM = QtWidgets.QLabel(self.frameGraph)
            self.labelGraphBPM.setMinimumSize(QtCore.QSize(600, 0))
            self.labelGraphBPM.setMaximumSize(QtCore.QSize(600, 16777215))
            self.labelGraphBPM.setAlignment(QtCore.Qt.AlignCenter)
            self.labelGraphBPM.setObjectName("labelGraphBPM")
            self.gridGraph.addWidget(self.labelGraphBPM)
        
        self.gridMeasureGraph.addWidget(self.frameGraph)
        self.gridMain.addWidget(self.frameMeasureGraph)
        
        # 이미지창은 전체 여유공간의 3/5, 그래프창은 2/5 만큼 차지하도록
        self.gridMain.setStretch(0, 0)
        self.gridMain.setStretch(1, 3)
        self.gridMain.setStretch(2, 2)
        

        self.gridMainWidget.addLayout(self.gridMain, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.widgetMain)

        self.retranslateUi(MainWindow)
        self.connectEvent()
        self.graph_init()
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(self.translate("MainWindow", '%s %s' % (self.ProgramName, self.Version)))
        MainWindow.setWindowIcon(QIcon("HEART_icon.png")) #icon 설정
        
        # Set Checkbox Text
        self.cbAutoCalc.setText(self.translate("MainWindow", "Auto Calc"))
        self.cbAutoROI.setText(self.translate("MainWindow", "Auto ROI"))
        self.cbAutoSave.setText(self.translate("MainWindow", "Auto Save"))
        self.cbAutoFolder.setText(self.translate("MainWindow", "Auto Folder"))
        # 0228 수정 시작 - check box text
        self.cbSmallModel.setText(self.translate("MainWindow", "Lightweight Model"))
        self.cbDrawEllipse.setText(self.translate("MainWindow", "Draw Ellipse"))
        # 0228 수정 끝

        # Set Button Text
        self.btnConnectHDMI.setText(self.translate("MainWindow", "Connect HDMI"))
        self.btnSetROI.setText(self.translate("MainWindow", "Set ROI")) 
        self.btnCalculateCAC.setText(self.translate("MainWindow", "Calculate"))
        self.btnLoadVideo.setText(self.translate("MainWindow", "Load Video"))
        self.btnExportVideo.setText(self.translate("MainWindow", "Export Video"))
        self.btnExportImage.setText(self.translate("MainWindow", "Export Image"))
        self.btnExportExcel.setText(self.translate("MainWindow", "Export Excel"))
        
        # Set Label Text
        self.labelImage.setText(self.translate("MainWindow", ""))
        self.labelMeasureROSC.setText(self.translate("MainWindow", ""))
        self.labelMeasureCAC.setText(self.translate("MainWindow", ""))
        if self.visualization == "matplotlib":
            self.labelGraphCAC.setText(self.translate("MainWindow", ""))
            self.labelGraphBPM.setText(self.translate("MainWindow", ""))
        
        '''
        # UI unvisible
        self.btnSetROI.setVisible(False)
        self.btnCalculateCAC.setVisible(False)
        self.btnExportVideo.setVisible(False)
        self.btnExportImage.setVisible(False)
        self.btnExportExcel.setVisible(False)
        
        self.labelMeasureROSC.setVisible(False)
        self.labelMeasureCAC.setVisible(False)
        '''
        
        #btn disable
        self.btnCalculateCAC.setEnabled(False)
        self.btnSetROI.setEnabled(False)
        self.btnExportVideo.setEnabled(False)
        self.btnExportImage.setEnabled(False)
        self.btnExportExcel.setEnabled(False)
        #'''
        
    def connectEvent(self):
        self.cbAutoCalc.stateChanged.connect(self.onCheckAutoCalc)
        self.cbAutoFolder.stateChanged.connect(self.onCheckAutoFolder)
        self.cbAutoROI.stateChanged.connect(self.onCheckAutoROI)
        self.cbAutoSave.stateChanged.connect(self.onCheckAutoSave)
        # 0228 수정 시작 - check box event 할당
        self.cbSmallModel.stateChanged.connect(self.onCheckSmallModel)
        self.cbDrawEllipse.stateChanged.connect(self.onCheckEllipse)
        # 0228 수정 시작
        
        # Set Button Event
        self.btnConnectHDMI.clicked.connect(self.onConnectHDMI)
        self.btnLoadVideo.clicked.connect(self.onStartvideoShow)               # click시 영상재생 시작
        # self.btnLoadVideo.clicked.connect(self.onStartvideoShow)  
        self.btnSetROI.clicked.connect(self.onROImanualsetting)                 
        self.btnCalculateCAC.clicked.connect(self.onStartInference) 
        self.btnExportExcel.clicked.connect(self.onSaveExcel)
        self.btnExportVideo.clicked.connect(self.onSaveVideo)
        
    
    def check_state_Ui(self):
        self.progressBar.setVisible(False)
        
        # HDMI가 연결되지 않은 대기상태.
        if self.state == State.Ready:
            self.btnConnectHDMI.setText(self.translate("MainWindow", "Reconnect"))
            
            self.btnConnectHDMI.setEnabled(True)
            self.btnLoadVideo.setEnabled(True)
            
            self.btnCalculateCAC.setEnabled(False)
            self.btnSetROI.setEnabled(False)
            self.btnExportVideo.setEnabled(False)
            self.btnExportImage.setEnabled(False)
            self.btnExportExcel.setEnabled(False)
            
            self.btnLoadVideo.setVisible(True)
            self.btnLoadVideo.setEnabled(True)
            
            if self.isVideo:
                self.btnLoadVideo.setText(self.translate("MainWindow", "Stop Play"))
                self.btnSetROI.setEnabled(True)
            else:
                self.btnLoadVideo.setText(self.translate("MainWindow", "Load Video"))
                self.btnSetROI.setEnabled(False)
        
        # HDMI가 연결된 상태 + HDMI영상이 출력되는 상태
        elif self.state == State.Load:
            # HDMI가 연결된 상태 + Video가 재생되지 않은 상태 (기본state)

            if self.isPlay == True:
                print("Something wrong!!!!!!!!! check please")
                self.doStopSlideShow()
            self.btnLoadVideo.setVisible(False)
            self.btnConnectHDMI.setText(self.translate("MainWindow", "Start HDMI"))
            self.btnCalculateCAC.setText(self.translate("MainWindow", "Calculate"))
            self.btnSetROI.setEnabled(True)
                
            self.btnConnectHDMI.setEnabled(True)
                
            self.btnCalculateCAC.setEnabled(True)
            self.btnSetROI.setEnabled(True)
            
            self.btnCalculateCAC.setVisible(True)
            self.btnSetROI.setVisible(True)
            
            self.btnExportVideo.setEnabled(False)
            self.btnExportImage.setEnabled(False)
            self.btnExportExcel.setEnabled(False)
            self.btnExportVideo.setVisible(False)
            self.btnExportImage.setVisible(False)
            self.btnExportExcel.setVisible(False)

        elif self.state == State.Play: 
            if self.isPlay:
                self.btnConnectHDMI.setText(self.translate("MainWindow", "Stop HDMI"))
                self.btnSetROI.setEnabled(False)
            else:
                self.btnConnectHDMI.setText(self.translate("MainWindow", "Start HDMI"))
                self.btnSetROI.setEnabled(True)
                
            self.btnConnectHDMI.setEnabled(True)
            self.btnLoadVideo.setEnabled(False)
            self.btnLoadVideo.setVisible(False)
            self.btnCalculateCAC.setEnabled(True)
            
            self.btnCalculateCAC.setVisible(True)
            #self.btnSetROI.setVisible(True)
            
            self.btnExportVideo.setEnabled(False)
            self.btnExportImage.setEnabled(False)
            self.btnExportExcel.setEnabled(False)
            
            self.btnExportVideo.setVisible(False)
            self.btnExportImage.setVisible(False)
            self.btnExportExcel.setVisible(False)
        
        elif self.state == State.Calc:  
            if self.isCalc:
                if self.isPlay:
                    self.btnConnectHDMI.setText(self.translate("MainWindow", "Start HDMI"))
                    self.btnConnectHDMI.setEnabled(False)
                    self.btnCalculateCAC.setText(self.translate("MainWindow", "Stop Calculate"))
                else:
                    self.btnCalculateCAC.setText(self.translate("MainWindow", "Calculate"))
                    self.btnConnectHDMI.setEnabled(True)
              
                
                self.btnLoadVideo.setEnabled(False)
                self.btnCalculateCAC.setEnabled(True)
                
                self.btnSetROI.setEnabled(False)
                self.btnExportExcel.setEnabled(True)
                self.btnExportVideo.setEnabled(True)
                self.btnLoadVideo.setVisible(False)
                self.btnSetROI.setVisible(True)
                self.btnExportVideo.setVisible(True)
                self.btnExportImage.setVisible(True)
                self.btnExportExcel.setVisible(True)
            else:
                self.btnCalculateCAC.setText(self.translate("MainWindow", "Calculate"))
                
                self.btnSetROI.setEnabled(True)
                self.btnExportVideo.setEnabled(False)
                self.btnExportImage.setEnabled(False)
                self.btnExportExcel.setEnabled(False)
                
                self.btnSetROI.setVisible(True)
                self.btnExportVideo.setVisible(True)
                self.btnExportImage.setVisible(True)
                self.btnExportExcel.setVisible(True)


    # %%
    def onCheckAutoCalc(self, state):
        self.AutoCalculate = True if state == Qt.Checked else False
        self.config = self.writeConfig("Environment", "AutoCalculate", self.AutoCalculate)
    
    def onCheckAutoFolder(self, state):
        self.AutoFolder = True if state == Qt.Checked else False
        self.config = self.writeConfig("Environment", "AutoFolder", self.AutoFolder)
        self.save_path_setting()
            
    def onCheckAutoROI(self, state):
        self.AutoROI = True if state == Qt.Checked else False
        self.config = self.writeConfig("Environment", "AutoROI", self.AutoROI)
        
            
    def onCheckAutoSave(self, state):
        self.AutoSave = True if state == Qt.Checked else False
        self.config = self.writeConfig("Environment", "AutoSave", self.AutoSave)
        
    # 0228 수정 시작 - check box event
    def onCheckSmallModel(self, state):
        self.SmallModel = True if state == Qt.Checked else False
        self.config = self.writeConfig("Environment", "SmallModel", self.SmallModel)
        self.model_load_select()
        
            
    def onCheckEllipse(self, state):
        self.DrawEllipse = True if state == Qt.Checked else False
        self.config = self.writeConfig("Environment", "DrawEllipse", self.DrawEllipse)
    # 0228 수정 완료
    
    # %%
    def onConnectHDMI(self):
        """
        HDMI connect button누를시 동작할 함수 지정
        
        State.Ready -> doCoonecHDMI
        State.Load -> onStarHDMI Show
        State.play -> onstarHDMIShow
        State.Calc -> onStartHDMIShow
        """
        if self.state == State.Ready:
            self.doConnectHDMI()
        elif self.state == State.Load:
            self.onStartHDMIShow()
        elif self.state == State.Play:
            self.onStartHDMIShow()
        elif self.state == State.Calc:
            self.onStartHDMIShow()
        
        self.check_state_Ui()
        
    def onStartHDMIShow(self):
        '''
        HDMI 버튼 눌렀을때 show_HDMI_capture 시작을 위한 timer 실행 함수
        self.isplay True시 버튼이 눌리면 -> Stop slide show
        self.isplay Fale시 버튼이 눌리면 -> timer start
        '''
        translate = self.translate
        
        if self.isPlay:  # isPlay는 현재 영상이 재생되고 있는지에 대한 지표
            self.isCalc = False
            #self.btnLoadVideo.setText(translate("MainWindow", "Load Video"))            
            self.doStopSlideShow() #self.isPlay = False
        else:
            self.isPlay = True
            self.state = State.Play
            self.isCalc = False
            
            self.timer = QTimer()
            self.frame_count=0
            #self.timer.timeout.connect(self.show_next_image)
            self.timer.timeout.connect(self.doShowHDMI)
            self.timer.start(10) # 0.01초 간격으로 이미지 변경
        
        self.check_state_Ui()

    def onStartInference(self):
        """
        calculation을 위한 inference code load 부분
        """
        print("onStartInference Started.", self.isCalc,self.isPlay, self.state)
        if self.isPlay:    # isPlay는 현재 영상이 재생되고 있는지에 대한 지표
            if self.state == State.Play:
                self.doStopSlideShow() #self.isPlay = False
                self.isCalc = False
                self.onStartInference()
            else:
                self.doStopSlideShow() #self.isPlay = False

        else:
            self.isCalc = True
            self.isPlay = True
            self.state = State.Calc
            
            self.timer = QTimer()
            self.autoTimer = QTimer()

            self.frame_count=0
            #self.timer.timeout.connect(self.show_next_image)
            self.timer.timeout.connect(self.doShowHDMI)
            self.timer.start(10) # 0.01초 간격으로 이미지 변경

            ''' # 자동저장 제외처리
            self.isautoTimer = True
            self.autoTimer.setInterval(180000)    # 3분마다 자동저장
            self.autoTimer.timeout.connect(self.dataSave)
            self.autoTimer.start()
            '''
            
        self.check_state_Ui()
        

    #화면 안 보일 시 자동 저장 함수 구현
    def check_save(self, img):
        """
        img에서 화면이 일정 비율 이상 흑백이 몇 초간 유지되는 경우 
        자동으로 calc가 멈추고 저장됨.
        """
        #cv2.imshow("check_sav_img", img)
        #print(img.shape)

        img_check = img.copy()
        # 0에서 10 사이의 값을 0으로 변경
        img_check[(img_check > 0) & (img_check <= 10)] = 0
        not_black_ratio = np.count_nonzero(img_check.reshape(-1)) / len(img_check.reshape(-1))

        self.isBlack = True if not_black_ratio < 0.25 else False
        # print("isBlack:         ", not_black_ratio, isBlack)
        
        if self.isBlack and not self.ischeckTimer:
            self.checkTimer = QTimer()
            self.checkTimer.setInterval(60000)    # 1분
            self.checkTimer.timeout.connect(self.doStopSlideShow)
            self.checkTimer.start()
            self.ischeckTimer = True
 
        if not self.isBlack and self.ischeckTimer:
            self.checkTimer.stop()
            self.ischeckTimer = False
      
    '''
    def onLoadVideo(self):
        """
        video를 load하기 위한 함수. video load 버튼 클릭시 동작되어야함.
        
        return :
        Capture 보드가 연결이 되었으면 -> HDMI_setting(), self.isHDMI = True
        Capture 보드가 연결되지 않으면 -> State.Ready, self.isHDMI = False
        """
        if self.isHDMI:
            self.isVideo = True
            self.video_path = self.open_file_display()
            self.video_file = video_init(self.video_path)
            
            self.frame_count=0
            self.timer.timeout.connect(self.show_next_video)
            self.timer.start(10) # 0.01초 간격으로 이미지 변경
        else:
            self.isVideo = False
            self.doStopSlideShow()
    '''        

    def onStartvideoShow(self):
        '''
        Video 버튼 눌렀을때 Video를 불러서 시작을 위한 timer 실행 함수
        '''
        translate = self.translate
        if self.isVideo:
            #self.btnLoadVideo.setText(translate("MainWindow", "Load Video"))     
            self.doStopSlideShow() #self.isPlay = False
            self.isVideo = False   

        else:
            self.isVideo = True
            #btn disabled
            self.btnCalculateCAC.setDisabled(False)
            #btn enabled
            self.btnSetROI.setEnabled(False)
            self.btnExportExcel.setEnabled(False)
            self.btnExportVideo.setEnabled(False)
            
            self.video_path = self.open_file_display()
            #self.video_path = 'C:\\Users\\USER_1\\Desktop\\code_review\\93001_VNet\\ROSC_CAC_code_v5\\video_path\\053_1_223.AVI'
            self.video_file = video_init(self.video_path)

            self.timer = QTimer()
            self.frame_count=0
            #self.timer.timeout.connect(self.show_next_image)
            self.timer.timeout.connect(self.doshow_next_video)
            self.timer.start(10) # 0.01초 간격으로 이미지 변경
        self.check_state_Ui()
            
    def onROImanualsetting(self):
        self.timer = QTimer()
        self.frame_count=0
        
        #setROI_image = pyautogui.screenshot() # 스크린샷으로 초기 이미지 생성
        if self.isVideo:
            success, image = self.video_file.read()
            setROI_image = image.copy()
        else:
            ret, frame = self.cap_video.read()
            setROI_image = frame.copy()

        self.ondraw_rectangle = dodraw_rectangle_ROI()
        #setROI_image = cv2.cvtColor(np.array(setROI_image), cv2.COLOR_RGB2BGR) # PIL 이미지를 OpenCV 형식으로 변환
        setROI_image_before = setROI_image.copy()
        if self.isVideo:
            cv2.rectangle(setROI_image_before, (self.ROI_x1_, self.ROI_y1_), (self.ROI_x2_, self.ROI_y2_), (0, 0, 255), 2)
        else:
            cv2.rectangle(setROI_image_before, (self.ROI_x1, self.ROI_y1), (self.ROI_x2, self.ROI_y2), (0, 0, 255), 2)
        cv2.imshow("setROI_image", setROI_image_before)
        
        params = {
            "image": setROI_image,
            "image_before": setROI_image_before,
            }
        #self.pyqt_display_func(setROI_image, self.labelImage)
        cv2.setMouseCallback("setROI_image", self.ondraw_rectangle.draw_rectangle_ROI, param=params)

        if self.isVideo:
            self.timer.timeout.connect(self.ROI_video_update)
            self.timer.start(10)
        else:
            #print("in onROImanualsetting",self.ondraw_rectangle.setROI_coordinate)
            self.timer.timeout.connect(self.ROI_update)
            self.timer.start(10) # 0.01초 간격으로 이미지 변경    
    

    # %%
    def doInitialize(self):
        self.state = State.Ready
        
        
        
        if self.model is None and self.test_transforms is None:
            print("Start loading model")
            self.start = time.time()
            self.model_256, self.test_transforms_256 = model_load_ViT(self.SmallModelName, self.target_size_256)
            self.model_512, self.test_transforms_512 = model_load_ViT(self.LargeModelName, self.target_size_512)
            self.model_load_select()
            print(f"Model took {time.time()-self.start: .5f} sec to load")
        
        if self.cap is None:
            self.doConnectHDMI()
            


    def doConnectHDMI(self):
        """
        Capture 보드 상태를 확인하고, State 상태 결정
        
        return :
        Capture 보드가 연결이 되었으면 -> State.Load, HDMI_setting(), self.isHDMI = True
        Capture 보드가 연결되지 않으면 -> State.Ready, self.isHDMI = False
        """
        print("doConnectHDMI")
        
        if self.state == State.Ready:
            #self.cap = cv2.VideoCapture("data/2023-10-23 16-53-18.mp4")
            self.cap = cv2.VideoCapture(self.DeviceID)
            self.Video_open_check = self.cap.isOpened()


        if self.Video_open_check:
            self.isHDMI = True
            self.isVideo = False
            if self.state == State.Ready:
                self.HDMI_setting()
            
            
            
        else:
            self.state = State.Ready
            self.isHDMI = False
            self.isVideo = False

            
    def ROI_update(self):
        if self.ondraw_rectangle.setROI_coordinate == None:
            pass
        elif self.ondraw_rectangle.setROI_coordinate != None:
            self.ROI_x1, self.ROI_y1, self.ROI_x2, self.ROI_y2 = self.ondraw_rectangle.setROI_coordinate
            self.ROI = '%d|%d|%d|%d' % (self.ROI_x1, self.ROI_y1, self.ROI_x2, self.ROI_y2)
            self.writeConfig('Parameter', 'ROI', self.ROI)
            print(self.ondraw_rectangle.setROI_coordinate)
            if self.isCalc:
                self.isCalc = False
                self.doStopSlideShow()
            self.check_state_Ui()

    def ROI_video_update(self):
        if self.ondraw_rectangle.setROI_coordinate == None:
            pass
        elif self.ondraw_rectangle.setROI_coordinate != None:
            self.ROI_x1_, self.ROI_y1_, self.ROI_x2_, self.ROI_y2_ = self.ondraw_rectangle.setROI_coordinate
            print(self.ondraw_rectangle.setROI_coordinate)
            
    def HDMI_setting(self):
        """
        Capture 보드 초기 설정을 위한 함수
        """
        self.start = time.time()
        self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1920)
        self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 1080)
        self.cap_video = self.cap
        print(f"Camera Setting Time: {time.time()-self.start: .5f} sec")
        
        if self.isHDMI == True:
            if self.AutoCalculate:
                #self.state = State.Calc
                print("auto inference")
                self.onStartInference()
            else:
                #self.state = State.Play
                print("auto inference")
                self.onStartHDMIShow()

    def doshow_next_video(self):
        """
        video file을 load해서 display하는 함수
        """
        total_frame_num = int(self.video_file.get(cv2.CAP_PROP_FRAME_COUNT))
        success, image = self.video_file.read()
        frame_count = 0
        if success:
            
            # calculate start
            crop_img = image_crop_3ch(image, self.ROI_x1_, self.ROI_y1_, self.ROI_x2_, self.ROI_y2_) 
            resize_img = image_scaling(crop_img, (500,460), 1)
            output = predict_image(self, resize_img, self.model)
            self.measurement, self.overlay = self.calc_CAC_print(f'Frame_{self.frame_count}.png', resize_img, output)
            
            #graph_plot
            self.cac_measurements.append(self.measurement[1]) # 예를 들어 measurement[1]이 CAC 측정값을 나타낸다고 가정
            self.IJV_measurements.append(self.measurement[2]) # 예를 들어 measurement[1]이 CAC 측정값을 나타낸다고 가정
            
            self.ABP_measurements.append(self.measurement[1]) # 예를 들어 measurement[1]이 CAC 측정값을 나타낸다고 가정
            
            #self.update_CAC_graph(self.cac_measurements) # 새로운 CAC 측정값으로 그래프 업데이트
            #self.update_BP_graph(self.IJV_measurements) # 새로운 CAC 측정값으로 그래프 업데이트
    
            #print(f'C:\\Users\\USER_1\\Desktop\\code_review\\capture\\Frame_{frame_count}.png')
                
            #time.sleep(1/fps)
            self.measurements.append(self.measurement)
            
            #TODO matplotlib vs pyqt visualization 비교
            if self.visualization == "matplotlib":
                self.update_CAC_graph(self.cac_measurements) # 새로운 CAC 측정값으로 그래프 업데이트
                self.update_BP_graph(self.IJV_measurements) # 새로운 CAC 측정값으로 그래프 업데이트
            elif self.visualization == "pyqtgraph":
                self.update_CAC_pyqtgraph(self.cac_measurements, self.IJV_measurements)
                #self.update_BP_pyqtgraph(self.ABP_measurements)
            else:
                print('visualization error')
                sys.exit()
                    
               
            self.images.append(f'Frame_{self.frame_count}.png')
            self.pyqt_display_func(self.overlay, self.labelImage)
            #self.labelMeasureROSC.setText(self.images[self.current_image_index]) # 이미지 이름 업데이트

            # 이미지에 텍스트 추가
            self.image_save_with_text()
            
            self.frame_count += 1
        else :
            self.video_file = video_init(self.video_path)
            self.file_name= os.path.basename(self.video_path)
            self.onSaveVideo()
            self.onSaveExcel()
            self.measurements = []
            self.frame_count=0
            
    
    def doShowHDMI(self):    # 
        """
        calculation을 위한 inference code 실행 부분
        """
        #self.loading_text.setText("")
        end = time.time()
        print(f"Display image load time : {end-self.start: .5f} sec")
        self.start = time.time()
        ret, frame = self.cap_video.read()
        if ret:
            #cv2.imwrite(f'./capture_with_UI/Frame_{self.frame_count}.png', frame)
            self.current_image_index += 1
            self.frame_count += 1

            #self.images.append(f'Frame_{self.frame_count}.png')
            #image preprocessing 부분
            # 중앙 정렬된 영상일 경우 여백 80,130,340,340
            crop_img = image_crop_3ch(frame, self.ROI_x1, self.ROI_y1, self.ROI_x2, self.ROI_y2) 
            resize_img = image_scaling(crop_img, (500,460), 1)
            #cv2.imshow("resized_img", resize_img)
            #print("resized img size: ", resize_img.shape)

            if self.isCalc == True:
                
                cv2.imwrite(os.path.join(self.temp_folder_origin, f'Frame_{self.frame_count}.png'), frame)
                self.check_save(resize_img[60:,:,0])

                output = predict_image(self, resize_img, self.model)
                self.measurement, self.overlay = self.calc_CAC_print(
                    f'Frame_{self.frame_count}.png', resize_img, output
                )

                # 1) 슬라이딩 윈도우에 값 넣기
                self.cac_buffer.append(self.measurement[1])
                self.ijv_buffer.append(self.measurement[2])    # IJV compression value
                self.abp_buffer.append(self.measurement[1])    # ABP 값을 넣을 올바른 인덱스


                # 2) 버퍼가 가득 찼을 때만 그래프 갱신
                # 10개 차면, 직접 유지하는 버퍼를 넘겨서 갱신
                if len(self.cac_buffer) == self.cac_buffer.maxlen:
                    self.update_CAC_pyqtgraph(
                        list(self.cac_buffer),
                        list(self.ijv_buffer)
                    )
                if self.frame_count % 40 == 0 and self.abp_buffer:
                    current_cac = self.abp_buffer[-1]
                    print(f"[ABP] updating at frame {self.frame_count}, CAC={current_cac:.3f}")
                    self.update_BP_pyqtgraph(current_cac)
                
                #graph_plot
                self.cac_measurements.append(self.measurement[1]) # 예를 들어 measurement[1]이 CAC 측정값을 나타낸다고 가정
                self.IJV_measurements.append(self.measurement[2]) # 예를 들어 measurement[1]이 CAC 측정값을 나타낸다고 가정
            
                self.ABP_measurements.append(self.measurement[1]) # 예를 들어 measurement[1]이 CAC 측정값을 나타낸다고 가정
                #self.update_CAC_graph(self.cac_measurements) # 새로운 CAC 측정값으로 그래프 업데이트
                #self.update_BP_graph(self.IJV_measurements) # 새로운 CAC 측정값으로 그래프 업데이트
    
                #print(f'C:\\Users\\USER_1\\Desktop\\code_review\\capture\\Frame_{frame_count}.png')
                
                #time.sleep(1/fps)
                self.measurements.append(self.measurement)
            
                #TODO matplotlib vs pyqt visualization 비교
                if self.visualization == "matplotlib":
                    self.update_CAC_graph(self.cac_measurements) # 새로운 CAC 측정값으로 그래프 업데이트
                    self.update_BP_graph(self.IJV_measurements) # 새로운 CAC 측정값으로 그래프 업데이트
                elif self.visualization == "pyqtgraph":
                    self.update_CAC_pyqtgraph(self.cac_measurements, self.IJV_measurements)
                    #self.update_BP_pyqtgraph(self.ABP_measurements)
                else:
                    print('visualization error')
                    sys.exit()
                    
                
                #cv2.imwrite(os.path.join(self.temp_folder,f'Frame_{self.frame_count}.png'), self.overlay)
                self.images.append(f'Frame_{self.frame_count}.png')
                self.pyqt_display_func(self.overlay, self.labelImage)
                

                # 이미지에 텍스트 추가
                self.image_save_with_text()

                
            elif self.isCalc == False:
                self.pyqt_display_func(resize_img, self.labelImage)
                self.labelMeasureROSC.setText(f'Frame_{self.current_image_index}.png') # 이미지 이름 업데이트
        
            
            print("doShow HDMI end", self.isCalc, self.state)
            
        elif ret == False:
            
            self.doConnectHDMI()
            if self.isPlay:
                self.isCalc = False
                self.doStopSlideShow()
            self.state = State.Ready
            self.check_state_Ui()
                # self.alert_message("Error", "HDMI is disconnected")
            
    def image_save_with_text(self):
        # 이미지에 텍스트 추가
        frame_info = f'Frame_{self.frame_count}.png'
        class_info = f'Class : {self.measurement[4]}' 
        cac_info = f'CAC   : {self.measurement[1]:.2f}' 

        font = cv2.FONT_HERSHEY_SIMPLEX
        font_scale = 0.5
        font_color = (0, 255, 255)  
        line_type = 2

        cv2.putText(self.overlay, frame_info, (10, 20), font, font_scale, font_color, line_type)
        cv2.putText(self.overlay, class_info, (10, 40), font, font_scale, font_color, line_type)
        cv2.putText(self.overlay, cac_info, (10, 60), font, font_scale, font_color, line_type)

        cv2.imwrite(os.path.join(self.temp_folder, frame_info), self.overlay)

        
    def alert_message(self, title=None, message=None):
        QtWidgets.QMessageBox.warning(title, message)
                
    def pyqt_display_func(self, before_img, display_position):
        """
        CV로 load한 image를 pyqt형태로 변환하는 함수
        """
        img = cv2.cvtColor(before_img, cv2.COLOR_BGR2RGB)
        height, width, channel = img.shape
        bytesPerLine = 3*width
        qImg = QImage(img.data, width, height, bytesPerLine, QImage.Format_RGB888)
        display_position.setPixmap(QPixmap.fromImage(qImg).scaled(display_position.width(), display_position.height(), aspectRatioMode=Qt.KeepAspectRatio))
        
    def open_file_display(self):
        fname = QFileDialog.getOpenFileName()
        return fname[0]
    
    def open_folder_display(self):
        foldername = QFileDialog.getExistingDirectory(None, "모델 결과 저장 폴더 선택")
        if foldername == '':
            print("자동저장으로 설정")
            self.AutoFolder = True
            self.cbAutoFolder.setChecked(self.AutoFolder)
        else:
            self.save_folder = foldername
        
    def update_BP_graph(self, measurement_IJV):
        """
        BP 값을 matplot graph로 plot하는 함수
        """
        # measurements에는 시간에 따른 CAC 값의 리스트가 저장되어 있어야 합니다.
        self.ax.clear()
        self.ax.plot(measurement_IJV[-40:], 
                     label='IJV', 
                     marker = 'o', 
                     color='blue', 
                     markersize=5, 
                     # markeredgecolor = 'black'
                     ) 

        self.ax.axhline(y=0.94, color='y', linestyle='--', label = 'Tresh CAC', linewidth=3)
        
        self.ax.text(-1, 0.94, '0.94', color='yellow', va='bottom')
        
        self.ax.legend(loc='lower left')
        self.ax.set_ylim([0.2,1])
        self.ax.set_title('ABP Graph')
        self.ax.set_xlabel('Frame')
        self.ax.set_ylabel('ABP Value')
        
        self.canvas.draw() # 그래프 그리기

        buf = self.canvas.buffer_rgba()
        # numpy 배열로 변환
        X = np.asarray(buf)
        # QImage로 변환
        qImg = QImage(X, X.shape[1], X.shape[0], QImage.Format_RGBA8888)

        pixmap = QPixmap.fromImage(qImg)
        self.labelGraphBPM.setPixmap(pixmap.scaled(self.labelGraphBPM.width(), self.labelGraphBPM.height(), Qt.KeepAspectRatio))
        
    def update_CAC_graph(self, measurement_cac):
        """
        Cac 값을 matplot graph로 plot하는 함수
        """
        # measurements에는 시간에 따른 CAC 값의 리스트가 저장되어 있어야 합니다.
        self.ax.clear()
        self.ax.plot(measurement_cac[-40:], 
                     label='CA', 
                     marker = 'o', 
                     color='red', 
                     markersize=5, 
                     # markeredgecolor = 'black'
                     ) 

        self.ax.axhline(y=0.94, color='y', linestyle='--', label = 'Tresh CAC', linewidth=3)
        
        self.ax.text(-1, 0.94, '0.94', color='yellow', va='bottom')
        
        self.ax.legend(loc='lower left')
        self.ax.set_ylim([0.2,1])
        self.ax.set_title('CAC Value Over Time')
        self.ax.set_xlabel('Frame')
        self.ax.set_ylabel('CAC Value')
        
        self.canvas.draw() # 그래프 그리기

        buf = self.canvas.buffer_rgba()
        # numpy 배열로 변환
        X = np.asarray(buf)
        # QImage로 변환
        qImg = QImage(X, X.shape[1], X.shape[0], QImage.Format_RGBA8888)

        pixmap = QPixmap.fromImage(qImg)
        self.labelGraphCAC.setPixmap(pixmap.scaled(self.labelGraphCAC.width(), self.labelGraphCAC.height(), Qt.KeepAspectRatio))
        
        #TODO pyqtgraph로 BPgraph 속도 확인하기

    def update_BP_pyqtgraph(self, current_cac):
        """
        current_cac: 최신 CAC 값 한 개
        """
        sbp = -215.2 * current_cac + 251.54
        mbp = -135.6 * current_cac + 165.12
        dbp = -105.3 * current_cac + 128.11

        # ABP 점도 갱신 (원래 선 위의 점)
        self.abp_dot_sbp.setData([current_cac], [sbp])
        self.abp_dot_mbp.setData([current_cac], [mbp])
        self.abp_dot_dbp.setData([current_cac], [dbp])

        # 텍스트도 우상단에
        vb = self.abpGraph.getViewBox()
        xr, yr = vb.viewRange()
        xmax, ymax = xr[1], yr[1]

        txt = f"SBP: {sbp:.1f}\nMBP: {mbp:.1f}\nDBP: {dbp:.1f}"
        self.text_bp.setText(txt)
        self.text_bp.setPos(xmax, ymax)


    def save_path_setting(self):
        if not self.AutoFolder:
            self.open_folder_display()
        elif self.AutoFolder:
            self.save_folder = os.path.join(self.base_folder, 'model_output')
            folder_make_func(self.save_folder)
            
    def model_load_select(self):
        if self.SmallModel:
            self.model, self.test_transforms = self.model_256, self.test_transforms_256
        else:
            self.model, self.test_transforms = self.model_512, self.test_transforms_512
            
    def update_CAC_pyqtgraph(self, all_cac_values, all_ijv_values=None):
        """
        all_cac_values: 전체 CAC 리스트
        all_ijv_values: 전체 IJV 리스트 (없으면 None)
        """
        total = len(all_cac_values)
        # 마지막 40개 윈도우
        window = all_cac_values[-40:]
        if all_ijv_values is not None:
            ijv_window = all_ijv_values[-40:]
        # 실제 프레임 번호를 x축에 사용
        start_idx = max(0, total - len(window))
        x = list(range(start_idx, start_idx + len(window)))

        # 선에 데이터만 갱신
        self.caPen.setData(x, window)
        if all_ijv_values is not None:
            self.ijvcaPen.setData(x, ijv_window)
        self.cacTreshPen.setData(x, [0.94] * len(window))

        # x축 범위: 총 프레임이 40 미만일 땐 0~39, 40 이상이면 (total-40)~(total-1)
        if total < 40:
            self.cacGraph.setXRange(0, 39)
        else:
            self.cacGraph.setXRange(total - 40, total - 1)

        
    def calc_CAC_print(self, path_name, input_image, mask_image):
        """
        post processing_ CAC 계산하는 함수
        (Invalid + 10-window 기반 상태 머신 적용)
        """
        measurement, overlay = process_images_realtime(
            os.path.basename(path_name), input_image, mask_image,
            300, self.DrawEllipse
        )

        cac_value = float(measurement[1])
        ijv_value = float(measurement[2])

        # 1) 초기화
        if not hasattr(self, 'last_state'):
            self.last_state = "Measuring..."
        if not hasattr(self, 'invalid_count'):
            self.invalid_count = 0
        if not hasattr(self, 'cac_window'):
            from collections import deque
            self.cac_window = deque(maxlen=10)
            self.ijv_window = deque(maxlen=10)

        # === [1] CAC == 0: invalid 체크
        if cac_value == 0.0:
            self.invalid_count += 1
            if self.invalid_count >= 3:
                self.labelMeasureROSC.setText("Invalid CAC")
                self.labelMeasureROSC.setStyleSheet("color: rgb(128, 128, 128);")
            measurement.append(self.last_state)  # 상태 유지
            self.labelMeasureCAC.setText(f'CAC: {cac_value:.2f}')
            return measurement, overlay

        # === [2] 정상치 들어오면 invalid 카운터 초기화 & 윈도우에 추가
        self.invalid_count = 0
        self.cac_window.append(cac_value)
        self.ijv_window.append(ijv_value)

        window_cac = list(self.cac_window)
        window_ijv = list(self.ijv_window)

        new_state = self.last_state
        new_color = None

        # === [3] 즉시 ROSC 판단 (급격 감소)
        if cac_value <= 0.80:
            new_state = "ROSC"
            new_color = "rgb(0, 0, 255)"

        # === [4] 윈도우가 채워졌을 때만 추가 판단
        elif len(window_cac) == 10:
            if all(v >= 0.94 for v in window_cac):
                new_state = "Arrest"
                new_color = "rgb(255, 0, 0)"
            elif all(v < 0.70 for v in window_cac) and all(i > 0.5 for i in window_ijv):
                new_state = "Not compressed"
                new_color = "rgb(255, 255, 255)"
            elif all(v < 0.94 for v in window_cac):
                new_state = "ROSC"
                new_color = "rgb(0, 0, 255)"
            else:
                # 상태 유지
                new_state = self.last_state

        else:
            # 아직 윈도우가 충분치 않으면 Measuring…
            new_state = "Measuring..."
            new_color = "rgb(255, 255, 0)"

        # === [5] UI 갱신
        self.labelMeasureROSC.setText(new_state)
        if new_color:
            self.labelMeasureROSC.setStyleSheet(f"color: {new_color};")

        self.last_state = new_state
        # measurement 리스트에 상태 추가 (index 5)
        if len(measurement) > 4:
            measurement[4] = new_state
        else:
            measurement.append(new_state)

        self.labelMeasureCAC.setText(f'CAC: {cac_value:.2f}')
        return measurement, overlay

        
        

    def graph_init(self):
        """
        Graph 2개 initialization 함수
        """
        if self.visualization == "matplotlib":
            #matplotlib visualization
            plt.style.use('dark_background')
            self.fig, self.ax = plt.subplots()
            self.ax.spines['right'].set_visible(False)
            self.ax.spines['top'].set_visible(False)
            self.canvas = FigureCanvas(self.fig)

        elif self.visualization == "pyqtgraph":
            # --- CAC 그래프 초기화 ---
            self.cacGraph = pyqtgraph.PlotWidget(title="CAC Value Over Time")
            self.cacGraph.addLegend(offset=(10, -10))
            # Threshold 선은 그대로
            self.cacTreshPen = self.cacGraph.plot(
                [], [], pen=pyqtgraph.mkPen('y', width=2, style=Qt.DashLine),
                name="Threshold 0.94"
            )
            # CA, IJV: 심볼 제거
            self.caPen = self.cacGraph.plot(
                [], [], pen=pyqtgraph.mkPen('r', width=2),
                name="CA"
            )
            self.ijvcaPen = self.cacGraph.plot(
                [], [], pen=pyqtgraph.mkPen('b', width=2),
                name="IJV"
            )
            self.cacGraph.setLabel('left', 'CAC Value')
            self.cacGraph.setLabel('bottom', 'Frame')
            self.cacGraph.setRange(yRange=[0.2, 1.0])

            # ABP 예측 그래프 초기화
            self.abpGraph = pyqtgraph.PlotWidget(title="ABP Prediction vs CAC")
            self.abpGraph.addLegend(offset=(10, -10))

            x = np.linspace(0.3, 1.05, 100)
            self.abpGraph.plot(
                x, -215.2*x + 251.54,
                pen=pyqtgraph.mkPen('r', width=1),
                name="SBP Line"
            )
            self.abpGraph.plot(
                x, -135.6*x + 165.12,
                pen=pyqtgraph.mkPen('g', width=1),
                name="MBP Line"
            )
            self.abpGraph.plot(
                x, -105.3*x + 128.11,
                pen=pyqtgraph.mkPen('m', width=1),
                name="DBP Line"
            )

            # 빈 점 데이터로 초기화
            self.abp_dot_sbp = self.abpGraph.plot(
                [], [], pen=None, symbol='o',
                symbolBrush='y', symbolSize=8, name="SBP"
            )
            self.abp_dot_mbp = self.abpGraph.plot(
                [], [], pen=None, symbol='o',
                symbolBrush='y', symbolSize=8, name="MBP"
            )
            self.abp_dot_dbp = self.abpGraph.plot(
                [], [], pen=None, symbol='o',
                symbolBrush='y', symbolSize=8, name="DBP"
            )

            # ABP 값을 뿌릴 단 하나의 TextItem: 우상단 고정(anchor=(1,0))
            self.text_bp = pyqtgraph.TextItem("", anchor=(1,0), color='w')
            font = QtGui.QFont()
            font.setPointSize(14)    
            self.text_bp.setFont(font)

            self.abpGraph.addItem(self.text_bp, ignoreBounds=True)

            self.abpGraph.setLabel('left', 'Pred BP Value')
            self.abpGraph.setLabel('bottom', 'CAC Value')
            self.abpGraph.setRange(xRange=[0.3, 1.05], yRange=[0, 180])


            self.gridGraph.addWidget(self.cacGraph)
            self.gridGraph.addWidget(self.abpGraph)

    def dataSave(self):
        if self.state == State.Calc and self.AutoSave:
            #now_time = time.localtime()
            self.file_name= time.strftime('%y%m%d_%H_%M_%S', time.localtime(time.time()))
            self.onSaveVideo_origin()
            self.onSaveVideo()
            self.onSaveExcel()

        if self.ischeckTimer:
            print("초음파 화면 중단으로 자동 저장")
            self.checkTimer.stop()
            self.ischeckTimer = False


    def doStopSlideShow(self):
        """
        SlideShow 중지 timer.stop()
        """

        self.dataSave()    # Video, Excel 파일 저장
        
        # 데이터 초기화
        self.cac_measurements = []
        self.IJV_measurements = []
        self.ABP_measurements = []
        self.measurements = []
        self.images = []

        self.timer.stop()
        self.isPlay = False
        self.state = State.Load

        if self.isVideo:
            self.state = State.Ready

        if self.isautoTimer:
            self.autoTimer.stop()
            self.isautoTimer = False

        if self.isBlack:
            self.check_state_Ui()

    def onSaveVideo(self, fps=10.0):
        """
        Video 저장. 기존에 저장해둔 frame image들의 images list를 받아서 저장
        """
        video_path = os.path.join(self.save_folder, self.file_name+"_video.avi")
        fourcc = cv2.VideoWriter_fourcc(*'XVID')
        out = cv2.VideoWriter(video_path, fourcc, fps, (640, 480))

        for image in self.images:
            img_path = os.path.join(self.temp_folder, image)
            img = cv2.imread(img_path)
            img = cv2.resize(img, (640, 480))
            out.write(img)

        out.release()
        print("Video saved:", video_path)
        
    def onSaveVideo_origin(self, fps=10.0):
        """
        Video 저장. 기존에 저장해둔 frame image들의 images list를 받아서 저장
        """
        video_path = os.path.join(self.save_folder, self.file_name+"originalimage_video.avi")
        fourcc = cv2.VideoWriter_fourcc(*'XVID')
        out = cv2.VideoWriter(video_path, fourcc, fps, (640, 480))

        for image in self.images:
            img_path = os.path.join(self.temp_folder_origin, image)
            img = cv2.imread(img_path)
            img = cv2.resize(img, (640, 480))
            out.write(img)

        out.release()
        print("Video saved:", video_path)
        
    def onSaveExcel(self):
        """
        Excel 저장. 기존에 stack해둔 self.measurements parameter를 excel로 expot
        """
        df_save_list = pd.DataFrame(self.measurements, columns = ['file_name', 'CA_compression value', 'IJV_compression value', 'min/max', 'class'])
        df_save_list.to_excel(os.path.join(self.save_folder,self.file_name+"measurements.xlsx"), engine='openpyxl', index=False)

        
    # 0228 수정 시작
    
    def loadConfig(self):
        config = configparser.ConfigParser()

        if os.path.isfile(self.config_filepath):
            config.read(self.config_filepath, encoding='utf-8')
            
            if config['System']['Version'] != self.Version:
                config = self.initConfig()
            
            self.ProgramName = config['System']['ProgramName']
            self.Version = config['System']['Version']
            self.LargeModelName = config['System']['LargeModelName']
            self.SmallModelName = config['System']['SmallModelName']
            self.save_folder = config['System']['SaveFolder']
            
            self.AutoCalculate = True if config['Environment']['AutoCalculate'] == 'True' else False
            self.AutoROI = True if config['Environment']['AutoROI'] == 'True' else False
            self.AutoSave = True if config['Environment']['AutoSave'] == 'True' else False
            self.AutoFolder = True if config['Environment']['AutoFolder'] == 'True' else False
            self.SmallModel = True if config['Environment']['SmallModel'] == 'True' else False
            self.DrawEllipse = True if config['Environment']['DrawEllipse'] == 'True' else False
            
            self.ROI = (config['Parameter']['ROI'])
            self.ROI_x1, self.ROI_y1, self.ROI_x2, self.ROI_y2 = map(int, self.ROI.split('|'))
            
        else:
            config = self.initConfig()
        
        return config
    
    def initConfig(self):
        config = configparser.ConfigParser()
        
        config['System'] = {}
        config['System']['ProgramName'] = self.ProgramName
        config['System']['Version'] = self.Version
        config['System']['LargeModelName'] = self.LargeModelName
        config['System']['SmallModelName'] = self.SmallModelName
        config['System']['SaveFolder'] = self.save_folder
        
        config['Environment'] = {}
        config['Environment']['AutoCalculate'] = str(self.AutoCalculate)
        config['Environment']['AutoROI'] = str(self.AutoROI)
        config['Environment']['AutoSave'] = str(self.AutoSave)
        config['Environment']['AutoFolder'] = str(self.AutoFolder)
        config['Environment']['SmallModel'] = str(self.SmallModel)
        config['Environment']['DrawEllipse'] = str(self.DrawEllipse)
        
        config['Parameter'] = {}
        config['Parameter']['ROI'] = self.ROI #'450|40|1500|950'
        
        with open(self.config_filepath, 'w', encoding='utf-8') as configfile:
            config.write(configfile)
            
        return config
    # 0228 수정 완료
    
    def writeConfig(self, category, target, value):
        config = self.config
        config[category][target] = str(value)
                
        with open(self.config_filepath, 'w', encoding='utf-8') as configfile:
            config.write(configfile)
        
        return config
        
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    
    MainWindow = QtWidgets.QMainWindow()

    ui = Ui_MainWindow()
    MainWindow.showMaximized()# show()
    #MainWindow.setWindowFlags(Qt.WindowStaysOnTopHint)
    sys.exit(app.exec_())
    

# %%
